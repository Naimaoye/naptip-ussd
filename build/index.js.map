{"version":3,"sources":["../src/index.js"],"names":["app","App","port","post","res","req","console","log","query","qs","parse","getQuery","text","msisdn","responseArray","menu","run","ussdResult","writeStatus","end","listen","token"],"mappings":";;;;AAAA;;AACA;;AAGA;;AACA;;AACA;;AAHA;AAkBA,IAAMA,GAAG,GAAG,IAAIC,WAAJ,EAAZ;AAEA,IAAMC,IAAI,GAAG,IAAb,C,CAEA;AACA;AACA;AACA;;AAEAF,GAAG,CAACG,IAAJ,CAAS,UAAT,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAEnC;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,MAAMC,KAAK,GAAGC,eAAGC,KAAH,CAASL,GAAG,CAACM,QAAJ,EAAT,CAAd;;AALmC,MAM3BC,IAN2B,GAMVJ,KANU,CAM3BI,IAN2B;AAAA,MAMrBC,MANqB,GAMVL,KANU,CAMrBK,MANqB;AAOnCP,EAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACA,MAAMC,aAAa,GAAG,yCAAoBF,IAApB,CAAtB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBO,aAAzB;;AACA,MAAID,MAAM,IAAI,gBAAV,IAA8BA,MAAM,IAAI,gBAA5C,EAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACAE,qBAAKC,GAAL,CAASR,KAAT,EAAgB,UAACS,UAAD,EAAgB;AAC7Bb,MAAAA,GAAG,CAACc,WAAJ,CAAgB,QAAhB,EAA0BC,GAA1B,CAA8BF,UAA9B;AACF,KAFD;AAGC,GA9DD,MA8DO;AACLb,IAAAA,GAAG,CAACc,WAAJ,CAAgB,QAAhB,EAA0BC,GAA1B,CAA8B,gBAA9B;AACD;AAEA,CA7ED,EA6EGC,MA7EH,CA6EUlB,IA7EV,EA6EgB,UAAAmB,KAAK,EAAI;AACvBA,EAAAA,KAAK,GACLf,OAAO,CAACC,GAAR,6BAAiCL,IAAjC,EADK,GAELI,OAAO,CAACC,GAAR,oCAAwCL,IAAxC,EAFA;AAGD,CAjFD","sourcesContent":["import { App } from '@sifrr/server';\nimport qs from 'qs';\n\n//import { readJson } from './utils/readJson';\nimport menu from './controllers/ussd';\nimport { parseResponseString } from './utils/parsedResponse';\nimport {\nGENDER_ARRAY_Q1,\nINCIDENCE_ARRAY_Q2,\n//STATE_FIRST_LETTER_Q3,\nSTATE_ARRAY_1,\nSTATE_ARRAY_2,\nSTATE_ARRAY_3,\nSTATE_ARRAY_4,\nSTATE_ARRAY_5,\nGENDER_ARRAY_PATTERN,\nINCIDENCE_ARRAY_PATTERN,\nSTATE_FIRST_LETTER_PATTERN,\nSTATE_ARRAY_PATTERN,\n} from './utils/constants';\n\nconst app = new App();\n\nconst port = 3003;\n\n// parse request url coming from kannel\n// give it an empty reply once the user connects \n// parse the url params\n// console.log something once the request is made\n\napp.post('/request', (res, req) => {\n\n// let ussdQuestionNumber = 0;\n// let details = {};\nconsole.log('Hello, I am here!')\nconst query = qs.parse(req.getQuery());\nconst { text, msisdn } = query;\nconsole.log(text);\nconsole.log(msisdn);\nconst responseArray = parseResponseString(text);\nconsole.log('respArray', responseArray);\nif (msisdn == '+2347063982876' || msisdn == '+2347063328009'){\n// if(ussdQuestionNumber == 0){\n//   details.questionNumber = 1;\n// }\n// if (details.questionNumber == 1){\n//   if (GENDER_ARRAY_PATTERN.includes(responseArray[0])){\n//     const parseResponseText = parseInt(responseArray[1]);\n//     const genderValue = parseResponseText - 1;\n//     details.gender = GENDER_ARRAY_Q1[genderValue];\n//     details.questionNumber = 2;\n//   }\n// }\n// if(details.questionNumber == 2){\n//   if (INCIDENCE_ARRAY_PATTERN.test(responseArray[0])) {\n//     const parseResponseText = parseInt(responseArray[1]);\n//     const incidenceValue = parseResponseText - 1;\n//     details.incidenceType = INCIDENCE_ARRAY_Q2[incidenceValue];\n//     details.questionNumber = 3;\n// }\n// }\n// if(details.questionNumber == 3){\n//   if (STATE_FIRST_LETTER_PATTERN.test(responseArray[0])) {\n//     const parseResponseText = parseInt(responseArray[1]);\n//     details.stateFirstLetter = parseResponseText;\n//     details.questionNumber = 4;\n// } \n// }\n// if(details.questionNumber == 4){\n//   if (STATE_ARRAY_PATTERN.test(responseArray[0])) {\n//     if(details.stateFirstLetter == 1){\n//       const parseResponseText = parseInt(responseArray[1]);\n//       const stateOption = parseResponseText - 1;\n//       const state = STATE_ARRAY_1[stateOption];\n//       details.state = state;\n//     } else if(details.stateFirstLetter == 2){\n//       const parseResponseText = parseInt(responseArray[1]);\n//       const stateOption = parseResponseText - 1;\n//       const state = STATE_ARRAY_2[stateOption];\n//       details.state = state;\n//     } else if(details.stateFirstLetter == 3){\n//       const parseResponseText = parseInt(responseArray[1]);\n//       const stateOption = parseResponseText - 1;\n//       const state = STATE_ARRAY_3[stateOption];\n//       details.state = state;\n//     } else if(details.stateFirstLetter == 4){\n//       const parseResponseText = parseInt(responseArray[1]);\n//       const stateOption = parseResponseText - 1;\n//       const state = STATE_ARRAY_4[stateOption];\n//       details.state = state;\n//     } else if(details.stateFirstLetter == 5){\n//       const parseResponseText = parseInt(responseArray[1]);\n//       const stateOption = parseResponseText - 1;\n//       const state = STATE_ARRAY_5[stateOption];\n//       details.state = state;\n//     }\n    \n// }\n// }\n//console.log('details', details);\nmenu.run(query, (ussdResult) => {\n   res.writeStatus(\"200 OK\").end(ussdResult);\n});\n} else {\n  res.writeStatus(\"200 OK\").end('invalid msisdn');\n}\n\n}).listen(port, token => {\n  token ?\n  console.log(`Listening to port ${port}`) :\n  console.log(`Failed to listen to port ${port}`);\n});\n\n"],"file":"index.js"}